\ DENILE #6 Multi-tasking demonstration

\ requires MULTICAM kernel and sprites.fth 

\ dialect: MULTICAM , CAMEL99 Multi-tasking kernel
\          with TI BASIC STYLE extensions

\ ====================================================
\ save & restore character set
\ we will use some low expansion RAM at address HEX 2000

HEX 2000 CONSTANT CHARBUFF     \ it's just that easy

\ PDT is the pattern descriptor table in VDP RAM
\ 800 is how many bytes it contains (2K bytes)
\ VREAD is VMBR in TI speak
\ VWRITE is VMBW in TI speak

: SAVE-CHARSET    ( -- )
         ( from) PDT  ( to) CHARBUFF   800 ( bytes) VREAD ;

\ *NEW* "COLORS" restores mulitple charsets wow!
: RESTORE-CHARSET ( -- )
         ( from) CHARBUFF ( to) PDT   800 ( bytes) VWRITE
          0 16 2 1 COLORS  ( change all color sets)
          8 SCREEN ;


\ give names to the pattern data
\ Where BASIC uses strings, we will use HEX integers
\ Each word drops 4 numbers onto the stack for CHARDEF
\ to pickup
HEX
: RSLOPE      ( -- n1 n2 n3 n4)  0102 0709 1F24 7F92 ;
: LSLOPE      ( -- n1 n2 n3 n4)  8040 E090 F824 FE49 ;
: STONE       ( -- n1 n2 n3 n4)  FF92 FF24 FF92 FF49 ;
: SAND        ( -- n1 n2 n3 n4)  AA55 4489 2002 4801 ;
: CAMEL       ( -- n1 n2 n3 n4)  0002 1735 7CFC 44AA ;  \ head up
: CAMEL2      ( -- n1 n2 n3 n4)  0000 1032 7FFD 44AA ;  \ head down
: MAN1        ( -- n1 n2 n3 n4)  0008 081C 2A08 1414 ;  \ hands up
: MAN2        ( -- n1 n2 n3 n4)  0008 2A1C 0808 1414 ;  \ hands down
: WAVE1       ( -- n1 n2 n3 n4)  0083 C7AE FBEF BDF7 ;
: WAVE2       ( -- n1 n2 n3 n4)  0007 8F5D F7DF 7BEF ;
: WAVE3       ( -- n1 n2 n3 n4)  000E 1FBA EFBF F6DF ;
: WAVE4       ( -- n1 n2 n3 n4)  001C 3E75 DF7F EDBF ;
: WAVE5       ( -- n1 n2 n3 n4)  0038 7CEA BFFE DB7F ;
: WAVE6       ( -- n1 n2 n3 n4)  0070 F8D5 7FFD B7FE ;
: WAVE7       ( -- n1 n2 n3 n4)  00E0 F1AB FEFB 6FFD ;
: WAVE8       ( -- n1 n2 n3 n4)  00C1 E357 FDF7 DEFB ;

2 BASE !   \ we can use binary numbers to draw bits.

: STAR        ( -- n1 n2 n3 n4)
              00000000 ><   \ swap byte
              00000000 +    \ add the previous byte to make 16 bits
              00000000 ><
              00000000 +
              00001000 ><   \ LOL all this for 1 pixel
              00000000 +
              00000000 ><
              00000000 + ;
: MOONTOP
              01000000 ><
              00110000 +
              00011000 ><
              00011100 +
              00001110 ><
              00001110 +
              00001111 ><
              00001111 + ;
: MOONBTM
              00001111 ><
              00001111 +
              00001110 ><
              00001110 +
              00011100 ><
              00011000 +
              00110000 ><
              01000000 + ;

DECIMAL
\ ====================================================
\ assign patterns to characters
\ this is a big definItion but it is like a table of data
\ so it is reads easily but it is CODE.
\ SET# calculates the set# for a given character

: CHANGE-CHARS ( -- )

  SAVE-CHARSET

\  pattern   char              set# fg bg color
\ --------   ----              ---- -----------
   RSLOPE      65 CHARDEF   65 SET# 11  1 COLOR
   LSLOPE      66 CHARDEF
   STONE       67 CHARDEF
   SAND        80 CHARDEF   80 SET#  2 12 COLOR
   CAMEL       88 CHARDEF   88 SET# 15  1 COLOR
   MAN1        89 CHARDEF
   STAR        96 CHARDEF   96 SET# 16  1 COLOR
   WAVE1      104 CHARDEF  104 SET#  5  6 COLOR
   WAVE2      105 CHARDEF
   WAVE3      106 CHARDEF
   WAVE4      107 CHARDEF
   WAVE5      108 CHARDEF
   WAVE6      109 CHARDEF
   WAVE7      110 CHARDEF
   WAVE8      111 CHARDEF
   MOONTOP    112 CHARDEF  112 SET# 15 1 COLOR
   MOONBTM    113 CHARDEF
\ --------------------------------------------
;

: TABS ( n -- ) 0 ?DO SPACE LOOP ;

\ DOT is the Forth word to print a number.
\ These words begin with '.' to tell us they print something
\ A common Forth style for naming words that print
: .SAND  ( col row -- )  80 32 HCHAR ;
: .CAMEL ( col row -- )  88 1  HCHAR ;
: .MAN   ( col row -- )  89 1  HCHAR ;

: .LEFT  ( -- )  [CHAR] A EMIT ;
: .RIGHT ( -- )  [CHAR] B EMIT ;
: .PEAK  ( -- )  .LEFT .RIGHT ;
: .BRICK ( -- )  [CHAR] C EMIT ;

: .STAR  ( col row -- ) 96 1 HCHAR ;  \ we pass Y,X parameters to HCHAR

: .STARS ( -- )
         1  1 .STAR
         3 11 .STAR
         6  3 .STAR
         8  9 .STAR
        13  2 .STAR
        19  1 .STAR
        22  4 .STAR
        23  8 .STAR
        28  3 .STAR
        31 10 .STAR ;
        
VARIABLE MCOL
VARIABLE MROW
: .MOON  ( col row -- )       \ we pass Y,X parameters to HCHAR
         2DUP MROW ! MCOL !   \ record the coordinates
         2DUP  112 1 HCHAR
            1+ 113 1 HCHAR ;

: /MOON   MCOL @ MROW @       \ CUT moon: erases the moon
          2DUP  BL 1 HCHAR
            1+  BL 1 HCHAR ;

: .1/2MOON ( col row) 112 1 HCHAR ;

: .BRICKS ( n -- )
          0 DO .BRICK LOOP ;

: .PYRAMID ( -- )
         15 6 AT-XY .PEAK
         15  ( intitial tab value on stack)
         13 1
         DO
           CR DUP I - TABS    ( subtact I from the tab value on stack
           .LEFT  I 2* .BRICKS   .RIGHT
         LOOP
         DROP ;  ( drop the tab value)


\ ====================================================
\ wave control variables
VARIABLE T
VARIABLE Y

: WAVECLIP   ( n -- n') DUP 111 > IF DROP 104 THEN ; \ clip n to valid wave char
: NEXT-T     ( -- n)  T @ 1+  WAVECLIP DUP  T ! ;    \ inc T by 1 & clip
: NEXT-Y     ( -- n)  Y @ 2+  WAVECLIP DUP  Y ! ;    \ inc Y by 2 & clip

: INIT-WAVES ( -- ) 104 DUP T !  2+ Y !  ;

: .RIVER     ( -- ) 0 20 NEXT-T 32 HCHAR
                    0 21 NEXT-Y 32 HCHAR ;

\ ====================================================
\ PAINT the scene

: .SCENE ( -- )
         .PYRAMID
         0 19 .SAND
         INIT-WAVES .RIVER
         0 22 .SAND
         1 18 .CAMEL
         2 18 .MAN  ;


\ ====================================================
\ The follow loops will run as separate tasks

: FLOW       ( -- )  ( task that makes the river flow)
             INIT-WAVES
             BEGIN
               10 MS
               .RIVER
             AGAIN ;

: TWINKLE ( n -- ) ( task that makes the stars twinkle all colors)
           BEGIN
              17 3
              DO
                96 SET# I 1 COLOR
                5 MS
              LOOP
           AGAIN ;

: MADCAMEL
          4 0
          DO
            CAMEL2 88 CHARDEF 20 MS
            CAMEL  88 CHARDEF 20 MS
          LOOP ;

: MADMAN
          6 0 DO
             MAN1 89 CHARDEF 10 MS
             MAN2 89 CHARDEF 10 MS
          LOOP
          MAN1 89 CHARDEF ;

: CARTOON
          BEGIN
             500 MS
             MADMAN
             1 MS
             MADCAMEL
         AGAIN ;

: MOONSET
          200 MS  /MOON  27  7 .MOON
          200 MS  /MOON  27  8 .MOON
          200 MS  /MOON  28  9 .MOON
          200 MS  /MOON  28 10 .MOON
          200 MS  /MOON  29 11 .MOON
          200 MS  /MOON  30 12 .MOON
          200 MS  /MOON  31 13 .MOON
          200 MS  /MOON
          MYSELF SLEEP
          PAUSE ;

\ =========================================================
\ This loop will run in the console task (USER0)
: WAITKEY   ( -- ) \ waits for any key
            BEGIN
               100 MS
               KEY?   \ KSCAN takes too long so avoid
            UNTIL  ;

: ...    200 MS ;

: PROMPT  0 23 BL 32 HCHAR
          0 23 AT-XY ;

: MSG   2 SCREEN 
        4 16  16 1 COLORS
        CLEAR
        PROMPT ." TI-99 MULTITASKING DEMO" ...
        PROMPT ." This demonstration runs 4 tasks" ...
        PROMPT ." The console the is root task" ...
        PROMPT ." #2 is the flowing river"      ...
        PROMPT ." #3 is the twinkling stars"    ...
        PROMPT ." #4 is the camel animation"    ...
        PROMPT ." #5 is the setting moon task"  ...
        PROMPT ." Press a key to begin the demo"
        KEY DROP 
        PROMPT ;

\ ========================================================
\ allocate memory for tasks
  CREATE TASK1   USIZE ALLOT
  CREATE TASK2   USIZE ALLOT
  CREATE TASK3   USIZE ALLOT
  CREATE TASK4   USIZE ALLOT

: PREAMBLE
          SINGLE
          INIT-MULTI
          TASK1 FORK
          TASK2 FORK
          TASK3 FORK
          TASK4 FORK
          ['] FLOW     TASK1 ASSIGN
          ['] TWINKLE  TASK2 ASSIGN
          ['] CARTOON  TASK3 ASSIGN
          ['] MOONSET  TASK4 ASSIGN ;

: RUN    ( -- )
         MSG
         PREAMBLE
         SAVE-CHARSET
         CHANGE-CHARS
         .SCENE .STARS
         26 6 .MOON
         .RIVER

         TASK1 WAKE  TASK2 WAKE
         TASK3 WAKE  TASK4 WAKE
         MULTI

         WAITKEY
         SINGLE
         HONK RESTORE-CHARSET
         CLEAR ;

