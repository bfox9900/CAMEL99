\ DENILE #4 Create a set of words to write the program

\ dialect: CAMEL99 Forth V 0.9 TRAINER
\          with extensions to help TI-BASIC PROGRAMMERS

\ ====================================================
\ *NEW* save & restore character set
\ we will use some low expansion RAM at address HEX 2000

HEX 2000 CONSTANT CHARBUFF     \ it's just that easy

\ PDT is the pattern descriptor table in VDP RAM
\ 800 is how many bytes it contains (2K bytes)
\ VREAD is VMBR in TI speak
\ VWRITE is VMBW in TI speak

: SAVE-CHARSET    ( -- )
         ( from) PDT ( to) CHARBUFF 800 ( bytes) VREAD ;

\ *NEW* "COLORS" restores mulitple charsets wow!
: RESTORE-CHARSET ( -- )
         ( from) CHARBUFF ( to) PDT 800 ( bytes) VWRITE
          0 16 2 1 COLORS
          8 SCREEN ;


\ give names to the pattern data
\ Where BASIC uses strings, we will use HEX integers
\ Each word drops 4 numbers onto the stack for CHARDEF
\ to pickup
HEX
: RSLOPE      ( -- n1 n2 n3 n4)  0102 0709 1F24 7F92 ;
: LSLOPE      ( -- n1 n2 n3 n4)  8040 E090 F824 FE49 ;
: STONE       ( -- n1 n2 n3 n4)  FF92 FF24 FF92 FF49 ;
: SAND        ( -- n1 n2 n3 n4)  AA55 4489 2002 4801 ;
: CAMEL       ( -- n1 n2 n3 n4)  0002 1735 7CFC 44AA ;
: LITTLE-MAN  ( -- n1 n2 n3 n4)  0008 081C 2A08 1414 ;

: WAVE1       ( -- n1 n2 n3 n4)  0083 C7AE FBEF BDF7 ;
: WAVE2       ( -- n1 n2 n3 n4)  0007 8F5D F7DF 7BEF ;
: WAVE3       ( -- n1 n2 n3 n4)  000E 1FBA EFBF F6DF ;
: WAVE4       ( -- n1 n2 n3 n4)  001C 3E75 DF7F EDBF ;
: WAVE5       ( -- n1 n2 n3 n4)  0038 7CEA BFFE DB7F ;
: WAVE6       ( -- n1 n2 n3 n4)  0070 F8D5 7FFD B7FE ;
: WAVE7       ( -- n1 n2 n3 n4)  00E0 F1AB FEFB 6FFD ;
: WAVE8       ( -- n1 n2 n3 n4)  00C1 E357 FDF7 DEFB ;

2 BASE !   \ OR we can use binary numbers to draw bits

: STAR        ( -- n1 n2 n3 n4)
              00000000 ><   \ swap byte
              00000000 +    \ add the previous byte to make 16 bits
              00000000 ><
              00000000 +
              00001000 ><   \ LOL all this for 1 pixel
              00000000 +
              00000000 ><
              00000000 + ;

: MOONTOP
              01000000 ><
              00110000 +
              00011000 ><
              00011100 +
              00001110 ><
              00001110 +
              00001111 ><
              00001111 + ;
: MOONBTM
              00001111 ><
              00001111 +
              00001110 ><
              00001110 +
              00011100 ><
              00011000 +
              00110000 ><
              01000000 + ;



DECIMAL
\ ====================================================
\ assign patterns to characters
\ this is a big definItion but it is like a table of data
\ so it is reads easily but it is CODE.
\ *NEW* SET# calculates the set# for us

: CHANGE-CHARS ( -- )

   SAVE-CHARSET
\  pattern   char              set# fg bg color
\ --------   ----              ---- -----------
   RSLOPE      65 CHARDEF   65 SET# 11  1 COLOR
   LSLOPE      66 CHARDEF
   STONE       67 CHARDEF
   SAND        80 CHARDEF   80 SET#  2 12 COLOR
   CAMEL       88 CHARDEF   88 SET# 15  1 COLOR
   LITTLE-MAN  89 CHARDEF
   STAR        96 CHARDEF   96 SET# 16  1 COLOR
   WAVE1      104 CHARDEF  104 SET#  5  6 COLOR
   WAVE2      105 CHARDEF
   WAVE3      106 CHARDEF
   WAVE4      107 CHARDEF
   WAVE5      108 CHARDEF
   WAVE6      109 CHARDEF
   WAVE7      110 CHARDEF
   WAVE8      111 CHARDEF
   MOONTOP    112 CHARDEF  112 SET# 15 1 COLOR
   MOONBTM    113 CHARDEF
\ --------------------------------------------
;

\ ====================================================
\ wave control variables
VARIABLE T
VARIABLE Y

\ pyramid building strings
32 STRING: A$
32 STRING: B$
32 STRING: C$

: TABS ( n -- ) 0 ?DO SPACE LOOP ;

: PUSH-UPS ( n -- ) 0 ?DO CR LOOP ;

\ DOT is the Forth word to print a number.
\ These words begin with '.' to tell us they print something
\ A Forth style you can use if you want to
: .SAND  ( -- )  0 23 80 32 HCHAR ;
: .CAMEL ( -- )  0 22 88 1  HCHAR ;
: .MAN   ( -- )  1 22 89 1  HCHAR ;
: .PEAK  ( -- )  CR 15 TABS ." AB" ;

: .STAR  ( col row -- ) 96 1 HCHAR ; \ This way we pass x,y parameters to HCHAR

: .STARS ( -- )
         1 1 .STAR
         3 11 .STAR
         6 3 .STAR
         8 9 .STAR
        13 2 .STAR
        19 1 .STAR
        22 4 .STAR
        23 8 .STAR
        28 3 .STAR
        31 10 .STAR ;
        
: TWINKLES ( n -- )
            0 ?DO  96 SET# DUP 1 1 COLOR  15 1 COLOR  LOOP ;

: .MOON  ( -- )
         26 6 112 1 HCHAR
         26 7 113 1 HCHAR ;

\ this part is still very BASIC style
\ We don't need to use strings for this
: .BRICKS ( -- )
      C$ " CC" &       C$ $!    \ 190 C$=C$&"CC"
     " A" C$ &  " B" & B$ $! ;  \ 200 B$="A"&C$&"B"

: .WALLS ( -- )
    A$ =""  B$ =""  C$ =""
    0 12 ?DO
         .BRICKS
         CR  I 2+ TABS B$ PRINT
     -1 +LOOP ;

\ ====================================================
\ Horizontal format code reads more like human language. 
\ Some people code Forth this way

: .PYRAMID ( -- )  .PEAK .WALLS .SAND .CAMEL .MAN  3 PUSH-UPS .SAND ;

: WAVECLIP   ( n -- n') DUP 111 > IF DROP 104 THEN ;  \ clip n to valid wave char
: NEXT-T     ( -- n)  T @ 1+  WAVECLIP DUP  T ! ;    \ inc T by 1 & clip
: NEXT-Y     ( -- n)  Y @ 2+  WAVECLIP DUP  Y ! ;    \ inc Y by 2 & clip

: INIT-WAVES ( -- ) 104 DUP T !  2+ Y !  ;

: .WAVES     ( -- ) 0 21 NEXT-T 32 HCHAR    0 22 NEXT-Y 32 HCHAR ;

: .RIVER     ( -- )
             INIT-WAVES  
             BEGIN
               100 MS
               .WAVES
               3 TWINKLES
               KEY?
             UNTIL ;

: RUN        ( -- )
             2 SCREEN
             CHANGE-CHARS
             CLEAR  .PYRAMID .STARS .MOON .RIVER
             HONK RESTORE-CHARSET 
             ;

 : TESTS  0 ?DO  CHANGE-CHARS LOOP BEEP RESTORE-CHARSET  ;
 


