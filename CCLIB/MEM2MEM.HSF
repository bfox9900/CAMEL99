\ ========================================================================
\ D I R E C T   M E M O R Y   O P E R A T I O N S
\ With TOS cache in a register and using the TMS9900 indirect addressing mode 
\ we can do things faster to variables by transfering: memory->memory  
\ verus  memory->stack->memory

CR
CR .( ** MEMORY TO MEMORY OPERATIONS ** )
CR

CODE: 1+!    ( addr -- )
             *TOS  INC,
              NEXT,
              END-CODE

CODE: 1-!    ( addr -- )
             *TOS  DEC,
              NEXT,
              END-CODE

CODE: 2+!    ( addr -- )
             *TOS  INCT,
              NEXT,
              END-CODE

CODE: 2-!    ( addr -- )
             *TOS  DECT,
              NEXT,
              END-CODE

CODE: AND!   ( u adr -- )        \ Equivalent to:   X @ 00FF AND  X !
             *SP INV,            \ Usage:    00FF X AND!  (~1/2 size and 2X faster)
             *SP+ *TOS SZC,
              TOS POP,
              NEXT,
              END-CODE

CODE: OR!    ( u adr -- )
             *SP+ *TOS OR,
              TOS POP,
              NEXT,
              END-CODE

CODE: XOR!   ( u adr -- )
             *SP+ *TOS XOR,
              TOS POP,
              NEXT,
              END-CODE

CODE: INV!   ( adr -- )
             *TOS INV,
              TOS POP,
              NEXT,
              END-CODE

CODE: ABS!   ( adr -- )
             *TOS ABS,
              TOS POP,
              NEXT,
              END-CODE

CODE: NEG!  ( adr -- )
             *TOS NEG,
              TOS POP,
              NEXT,
              END-CODE

CODE: MOV    ( addr addr -- )
             *SP+ *TOS MOV,
              TOS POP,
              NEXT,
              END-CODE

CODE: ADD    ( addr addr -- )  \ equiv: X @ Y @ + Y !
             *SP+ *TOS ADD,    \ usage:  X Y ADD
              TOS POP,
              NEXT,
              END-CODE

CODE: SUB   ( addr addr -- )
             *SP+ *TOS SUB,
             *TOS INV,
              TOS POP,
              NEXT,
              END-CODE

CODE: XCHG   ( adr1 adr2 -- ) \ exchange values of 2 variables
             *SP+  R0 MOV,    \ pop adr1 into R0
             *R0   W  MOV,    \ adr1 @  W  !
             *TOS *R0 MOV,    \ mem2me m move  adr2 to adr1
              W  *TOS MOV,    \ move value adr1 to adr2
              TOS POP,
              NEXT,
              END-CODE
